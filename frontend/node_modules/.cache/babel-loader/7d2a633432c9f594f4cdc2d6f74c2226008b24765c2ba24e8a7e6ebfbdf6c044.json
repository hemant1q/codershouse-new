{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ACTIONS } from \"../actions\";\nimport { socketInit } from \"../socket\";\nimport freeice from \"freeice\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n  useEffect(() => {\n    const initChat = async () => {\n      socket.current = socketInit();\n      await captureMedia();\n      addNewClient({\n        ...user,\n        muted: true\n      }, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      });\n      socket.current.on(ACTIONS.MUTE_INFO, _ref => {\n        let {\n          userId,\n          isMute\n        } = _ref;\n        handleSetMute(isMute, userId);\n      });\n      socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n      socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n      socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n      socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n      socket.current.on(ACTIONS.MUTE, _ref2 => {\n        let {\n          peerId,\n          userId\n        } = _ref2;\n        handleSetMute(true, userId);\n      });\n      socket.current.on(ACTIONS.UNMUTE, _ref3 => {\n        let {\n          peerId,\n          userId\n        } = _ref3;\n        handleSetMute(false, userId);\n      });\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user\n      });\n      async function captureMedia() {\n        // Start capturing local audio stream.\n        localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n      }\n      async function handleNewPeer(_ref4) {\n        let {\n          peerId,\n          createOffer,\n          user: remoteUser\n        } = _ref4;\n        if (peerId in connections.current) {\n          return console.warn(`You are already connected with ${peerId} (${user.name})`);\n        }\n\n        // Store it to connections\n        connections.current[peerId] = new RTCPeerConnection({\n          iceServers: freeice()\n        });\n\n        // Handle new ice candidate on this peer connection\n        connections.current[peerId].onicecandidate = event => {\n          socket.current.emit(ACTIONS.RELAY_ICE, {\n            peerId,\n            icecandidate: event.candidate\n          });\n        };\n\n        // Handle on track event on this connection\n        connections.current[peerId].ontrack = _ref5 => {\n          let {\n            streams: [remoteStream]\n          } = _ref5;\n          addNewClient({\n            ...remoteUser,\n            muted: true\n          }, () => {\n            // get current users mute info\n            const currentUser = clientsRef.current.find(client => client.id === user.id);\n            if (currentUser) {\n              socket.current.emit(ACTIONS.MUTE_INFO, {\n                userId: user.id,\n                roomId,\n                isMute: currentUser.muted\n              });\n            }\n            if (audioElements.current[remoteUser.id]) {\n              audioElements.current[remoteUser.id].srcObject = remoteStream;\n            } else {\n              let settled = false;\n              const interval = setInterval(() => {\n                if (audioElements.current[remoteUser.id]) {\n                  audioElements.current[remoteUser.id].srcObject = remoteStream;\n                  settled = true;\n                }\n                if (settled) {\n                  clearInterval(interval);\n                }\n              }, 300);\n            }\n          });\n        };\n\n        // Add connection to peer connections track\n        localMediaStream.current.getTracks().forEach(track => {\n          connections.current[peerId].addTrack(track, localMediaStream.current);\n        });\n\n        // Create an offer if required\n        if (createOffer) {\n          const offer = await connections.current[peerId].createOffer();\n\n          // Set as local description\n          await connections.current[peerId].setLocalDescription(offer);\n\n          // send offer to the server\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: offer\n          });\n        }\n      }\n      async function handleRemovePeer(_ref6) {\n        let {\n          peerId,\n          userId\n        } = _ref6;\n        // Correction: peerID to peerId\n        if (connections.current[peerId]) {\n          connections.current[peerId].close();\n        }\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n        setClients(list => list.filter(c => c.id !== userId));\n        alert(\"Please reload the page\");\n      }\n      async function handleIceCandidate(_ref7) {\n        let {\n          peerId,\n          icecandidate\n        } = _ref7;\n        if (icecandidate) {\n          connections.current[peerId].addIceCandidate(icecandidate);\n        }\n      }\n      async function setRemoteMedia(_ref8) {\n        let {\n          peerId,\n          sessionDescription: remoteSessionDescription\n        } = _ref8;\n        connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n        // If session descrition is offer then create an answer\n        if (remoteSessionDescription.type === \"offer\") {\n          const connection = connections.current[peerId];\n          const answer = await connection.createAnswer();\n          connection.setLocalDescription(answer);\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: answer\n          });\n        }\n      }\n      async function handleSetMute(mute, userId) {\n        const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n        const allConnectedClients = JSON.parse(JSON.stringify(clientsRef.current));\n        if (clientIdx > -1) {\n          allConnectedClients[clientIdx].muted = mute;\n          setClients(allConnectedClients);\n        }\n      }\n    };\n    initChat();\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n      }\n      socket.current.off(ACTIONS.ADD_PEER);\n      socket.current.off(ACTIONS.REMOVE_PEER);\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n      socket.current.off(ACTIONS.MUTE);\n      socket.current.off(ACTIONS.UNMUTE);\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"3TvHJpyJNNvMGFf9ptUfUUM9qII=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","current","initChat","captureMedia","muted","localElement","volume","srcObject","on","MUTE_INFO","_ref","userId","isMute","handleSetMute","ADD_PEER","handleNewPeer","REMOVE_PEER","handleRemovePeer","ICE_CANDIDATE","handleIceCandidate","SESSION_DESCRIPTION","setRemoteMedia","MUTE","_ref2","peerId","UNMUTE","_ref3","emit","JOIN","navigator","mediaDevices","getUserMedia","audio","_ref4","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","_ref5","streams","remoteStream","currentUser","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","_ref6","close","list","filter","c","alert","_ref7","addIceCandidate","_ref8","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","mute","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","stop","LEAVE","off","provideRef","instance","handleMute","enabled"],"sources":["C:/Users/mukta/OneDrive/Pictures/Documents/codershouse-3/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport { ACTIONS } from \"../actions\";\r\nimport { socketInit } from \"../socket\";\r\nimport freeice from \"freeice\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n  const [clients, setClients] = useStateWithCallback([]);\r\n  const audioElements = useRef({});\r\n  const connections = useRef({});\r\n  const socket = useRef(null);\r\n  const localMediaStream = useRef(null);\r\n  const clientsRef = useRef(null);\r\n\r\n  const addNewClient = useCallback(\r\n    (newClient, cb) => {\r\n      const lookingFor = clients.find((client) => client.id === newClient.id);\r\n\r\n      if (lookingFor === undefined) {\r\n        setClients((existingClients) => [...existingClients, newClient], cb);\r\n      }\r\n    },\r\n    [clients, setClients]\r\n  );\r\n\r\n  useEffect(() => {\r\n    clientsRef.current = clients;\r\n  }, [clients]);\r\n\r\n  useEffect(() => {\r\n    const initChat = async () => {\r\n      socket.current = socketInit();\r\n      await captureMedia();\r\n      addNewClient({ ...user, muted: true }, () => {\r\n        const localElement = audioElements.current[user.id];\r\n        if (localElement) {\r\n          localElement.volume = 0;\r\n          localElement.srcObject = localMediaStream.current;\r\n        }\r\n      });\r\n      socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\r\n        handleSetMute(isMute, userId);\r\n      });\r\n\r\n      socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n      socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n      socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\r\n      socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\r\n      socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\r\n        handleSetMute(true, userId);\r\n      });\r\n      socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\r\n        handleSetMute(false, userId);\r\n      });\r\n      socket.current.emit(ACTIONS.JOIN, {\r\n        roomId,\r\n        user,\r\n      });\r\n\r\n      async function captureMedia() {\r\n        // Start capturing local audio stream.\r\n        localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n          audio: true,\r\n        });\r\n      }\r\n      async function handleNewPeer({ peerId, createOffer, user: remoteUser }) {\r\n        if (peerId in connections.current) {\r\n          return console.warn(\r\n            `You are already connected with ${peerId} (${user.name})`\r\n          );\r\n        }\r\n\r\n        // Store it to connections\r\n        connections.current[peerId] = new RTCPeerConnection({\r\n          iceServers: freeice(),\r\n        });\r\n\r\n        // Handle new ice candidate on this peer connection\r\n        connections.current[peerId].onicecandidate = (event) => {\r\n          socket.current.emit(ACTIONS.RELAY_ICE, {\r\n            peerId,\r\n            icecandidate: event.candidate,\r\n          });\r\n        };\r\n\r\n        // Handle on track event on this connection\r\n        connections.current[peerId].ontrack = ({ streams: [remoteStream] }) => {\r\n          addNewClient({ ...remoteUser, muted: true }, () => {\r\n            // get current users mute info\r\n            const currentUser = clientsRef.current.find(\r\n              (client) => client.id === user.id\r\n            );\r\n            if (currentUser) {\r\n              socket.current.emit(ACTIONS.MUTE_INFO, {\r\n                userId: user.id,\r\n                roomId,\r\n                isMute: currentUser.muted,\r\n              });\r\n            }\r\n            if (audioElements.current[remoteUser.id]) {\r\n              audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n            } else {\r\n              let settled = false;\r\n              const interval = setInterval(() => {\r\n                if (audioElements.current[remoteUser.id]) {\r\n                  audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n                  settled = true;\r\n                }\r\n\r\n                if (settled) {\r\n                  clearInterval(interval);\r\n                }\r\n              }, 300);\r\n            }\r\n          });\r\n        };\r\n\r\n        // Add connection to peer connections track\r\n        localMediaStream.current.getTracks().forEach((track) => {\r\n          connections.current[peerId].addTrack(track, localMediaStream.current);\r\n        });\r\n\r\n        // Create an offer if required\r\n        if (createOffer) {\r\n          const offer = await connections.current[peerId].createOffer();\r\n\r\n          // Set as local description\r\n          await connections.current[peerId].setLocalDescription(offer);\r\n\r\n          // send offer to the server\r\n          socket.current.emit(ACTIONS.RELAY_SDP, {\r\n            peerId,\r\n            sessionDescription: offer,\r\n          });\r\n        }\r\n      }\r\n      async function handleRemovePeer({ peerId, userId }) {\r\n        // Correction: peerID to peerId\r\n        if (connections.current[peerId]) {\r\n          connections.current[peerId].close();\r\n        }\r\n\r\n        delete connections.current[peerId];\r\n        delete audioElements.current[peerId];\r\n        setClients((list) => list.filter((c) => c.id !== userId));\r\n        alert(\"Please reload the page\");\r\n      }\r\n      async function handleIceCandidate({ peerId, icecandidate }) {\r\n        if (icecandidate) {\r\n          connections.current[peerId].addIceCandidate(icecandidate);\r\n        }\r\n      }\r\n      async function setRemoteMedia({\r\n        peerId,\r\n        sessionDescription: remoteSessionDescription,\r\n      }) {\r\n        connections.current[peerId].setRemoteDescription(\r\n          new RTCSessionDescription(remoteSessionDescription)\r\n        );\r\n\r\n        // If session descrition is offer then create an answer\r\n        if (remoteSessionDescription.type === \"offer\") {\r\n          const connection = connections.current[peerId];\r\n\r\n          const answer = await connection.createAnswer();\r\n          connection.setLocalDescription(answer);\r\n\r\n          socket.current.emit(ACTIONS.RELAY_SDP, {\r\n            peerId,\r\n            sessionDescription: answer,\r\n          });\r\n        }\r\n      }\r\n      async function handleSetMute(mute, userId) {\r\n        const clientIdx = clientsRef.current\r\n          .map((client) => client.id)\r\n          .indexOf(userId);\r\n        const allConnectedClients = JSON.parse(\r\n          JSON.stringify(clientsRef.current)\r\n        );\r\n        if (clientIdx > -1) {\r\n          allConnectedClients[clientIdx].muted = mute;\r\n          setClients(allConnectedClients);\r\n        }\r\n      }\r\n    };\r\n\r\n    initChat();\r\n    return () => {\r\n      localMediaStream.current.getTracks().forEach((track) => track.stop());\r\n      socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n      for (let peerId in connections.current) {\r\n        connections.current[peerId].close();\r\n        delete connections.current[peerId];\r\n        delete audioElements.current[peerId];\r\n      }\r\n      socket.current.off(ACTIONS.ADD_PEER);\r\n      socket.current.off(ACTIONS.REMOVE_PEER);\r\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n      socket.current.off(ACTIONS.MUTE);\r\n      socket.current.off(ACTIONS.UNMUTE);\r\n    };\r\n  }, []);\r\n\r\n  const provideRef = (instance, userId) => {\r\n    audioElements.current[userId] = instance;\r\n  };\r\n\r\n  const handleMute = (isMute, userId) => {\r\n    let settled = false;\r\n\r\n    if (userId === user.id) {\r\n      let interval = setInterval(() => {\r\n        if (localMediaStream.current) {\r\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n          if (isMute) {\r\n            socket.current.emit(ACTIONS.MUTE, {\r\n              roomId,\r\n              userId: user.id,\r\n            });\r\n          } else {\r\n            socket.current.emit(ACTIONS.UNMUTE, {\r\n              roomId,\r\n              userId: user.id,\r\n            });\r\n          }\r\n          settled = true;\r\n        }\r\n        if (settled) {\r\n          clearInterval(interval);\r\n        }\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  return {\r\n    clients,\r\n    provideRef,\r\n    handleMute,\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}