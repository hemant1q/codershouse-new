{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ACTIONS } from \"../actions\";\nimport { socketInit } from \"../socket\";\nimport freeice from \"freeice\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n  useEffect(() => {\n    // const initChat = async () => {\n    //   socket.current = socketInit();\n    //   await captureMedia();\n    //   addNewClient({ ...user, muted: true }, () => {\n    //     const localElement = audioElements.current[user.id];\n    //     if (localElement) {\n    //       localElement.volume = 0;\n    //       localElement.srcObject = localMediaStream.current;\n    //     }\n    //   });\n    //   socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\n    //     handleSetMute(isMute, userId);\n    //   });\n\n    //   socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n    //   socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n    //   socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n    //   socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n    //   socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\n    //     handleSetMute(true, userId);\n    //   });\n    //   socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\n    //     handleSetMute(false, userId);\n    //   });\n    //   socket.current.emit(ACTIONS.JOIN, {\n    //     roomId,\n    //     user,\n    //   });\n\n    //   async function captureMedia() {\n    //     // Start capturing local audio stream.\n    //     localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n    //       audio: true,\n    //     });\n    //   }\n    //   async function handleNewPeer({ peerId, createOffer, user: remoteUser }) {\n    //     if (peerId in connections.current) {\n    //       return console.warn(\n    //         `You are already connected with ${peerId} (${user.name})`\n    //       );\n    //     }\n\n    //     // Store it to connections\n    //     connections.current[peerId] = new RTCPeerConnection({\n    //       iceServers: freeice(),\n    //     });\n\n    //     // Handle new ice candidate on this peer connection\n    //     connections.current[peerId].onicecandidate = (event) => {\n    //       socket.current.emit(ACTIONS.RELAY_ICE, {\n    //         peerId,\n    //         icecandidate: event.candidate,\n    //       });\n    //     };\n\n    //     // Handle on track event on this connection\n    //     connections.current[peerId].ontrack = ({ streams: [remoteStream] }) => {\n    //       addNewClient({ ...remoteUser, muted: true }, () => {\n    //         // get current users mute info\n    //         const currentUser = clientsRef.current.find(\n    //           (client) => client.id === user.id\n    //         );\n    //         if (currentUser) {\n    //           socket.current.emit(ACTIONS.MUTE_INFO, {\n    //             userId: user.id,\n    //             roomId,\n    //             isMute: currentUser.muted,\n    //           });\n    //         }\n    //         if (audioElements.current[remoteUser.id]) {\n    //           audioElements.current[remoteUser.id].srcObject = remoteStream;\n    //         } else {\n    //           let settled = false;\n    //           const interval = setInterval(() => {\n    //             if (audioElements.current[remoteUser.id]) {\n    //               audioElements.current[remoteUser.id].srcObject = remoteStream;\n    //               settled = true;\n    //             }\n\n    //             if (settled) {\n    //               clearInterval(interval);\n    //             }\n    //           }, 300);\n    //         }\n    //       });\n    //     };\n\n    //     // Add connection to peer connections track\n    //     localMediaStream.current.getTracks().forEach((track) => {\n    //       connections.current[peerId].addTrack(track, localMediaStream.current);\n    //     });\n\n    //     // Create an offer if required\n    //     if (createOffer) {\n    //       const offer = await connections.current[peerId].createOffer();\n\n    //       // Set as local description\n    //       await connections.current[peerId].setLocalDescription(offer);\n\n    //       // send offer to the server\n    //       socket.current.emit(ACTIONS.RELAY_SDP, {\n    //         peerId,\n    //         sessionDescription: offer,\n    //       });\n    //     }\n    //   }\n    //   async function handleRemovePeer({ peerId, userId }) {\n    //     // Correction: peerID to peerId\n    //     if (connections.current[peerId]) {\n    //       connections.current[peerId].close();\n    //     }\n\n    //     delete connections.current[peerId];\n    //     delete audioElements.current[peerId];\n    //     setClients((list) => list.filter((c) => c.id !== userId));\n    //   }\n    //   async function handleIceCandidate({ peerId, icecandidate }) {\n    //     if (icecandidate) {\n    //       connections.current[peerId].addIceCandidate(icecandidate);\n    //     }\n    //   }\n    //   async function setRemoteMedia({\n    //     peerId,\n    //     sessionDescription: remoteSessionDescription,\n    //   }) {\n    //     connections.current[peerId].setRemoteDescription(\n    //       new RTCSessionDescription(remoteSessionDescription)\n    //     );\n\n    //     // If session descrition is offer then create an answer\n    //     if (remoteSessionDescription.type === \"offer\") {\n    //       const connection = connections.current[peerId];\n\n    //       const answer = await connection.createAnswer();\n    //       connection.setLocalDescription(answer);\n\n    //       socket.current.emit(ACTIONS.RELAY_SDP, {\n    //         peerId,\n    //         sessionDescription: answer,\n    //       });\n    //     }\n    //   }\n    //   async function handleSetMute(mute, userId) {\n    //     const clientIdx = clientsRef.current\n    //       .map((client) => client.id)\n    //       .indexOf(userId);\n    //     const allConnectedClients = JSON.parse(\n    //       JSON.stringify(clientsRef.current)\n    //     );\n    //     if (clientIdx > -1) {\n    //       allConnectedClients[clientIdx].muted = mute;\n    //       setClients(allConnectedClients);\n    //     }\n    //   }\n    // };\n\n    // initChat();\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n      }\n      socket.current.off(ACTIONS.ADD_PEER);\n      socket.current.off(ACTIONS.REMOVE_PEER);\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n      socket.current.off(ACTIONS.MUTE);\n      socket.current.off(ACTIONS.UNMUTE);\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"3TvHJpyJNNvMGFf9ptUfUUM9qII=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","current","getTracks","forEach","track","stop","emit","LEAVE","peerId","close","off","ADD_PEER","REMOVE_PEER","ICE_CANDIDATE","SESSION_DESCRIPTION","MUTE","UNMUTE","provideRef","instance","userId","handleMute","isMute","settled","interval","setInterval","enabled","clearInterval"],"sources":["C:/Users/mukta/OneDrive/Pictures/Documents/codershouse-3/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport { ACTIONS } from \"../actions\";\r\nimport { socketInit } from \"../socket\";\r\nimport freeice from \"freeice\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n  const [clients, setClients] = useStateWithCallback([]);\r\n  const audioElements = useRef({});\r\n  const connections = useRef({});\r\n  const socket = useRef(null);\r\n  const localMediaStream = useRef(null);\r\n  const clientsRef = useRef(null);\r\n\r\n  const addNewClient = useCallback(\r\n    (newClient, cb) => {\r\n      const lookingFor = clients.find((client) => client.id === newClient.id);\r\n\r\n      if (lookingFor === undefined) {\r\n        setClients((existingClients) => [...existingClients, newClient], cb);\r\n      }\r\n    },\r\n    [clients, setClients]\r\n  );\r\n\r\n  useEffect(() => {\r\n    clientsRef.current = clients;\r\n  }, [clients]);\r\n\r\n  useEffect(() => {\r\n    // const initChat = async () => {\r\n    //   socket.current = socketInit();\r\n    //   await captureMedia();\r\n    //   addNewClient({ ...user, muted: true }, () => {\r\n    //     const localElement = audioElements.current[user.id];\r\n    //     if (localElement) {\r\n    //       localElement.volume = 0;\r\n    //       localElement.srcObject = localMediaStream.current;\r\n    //     }\r\n    //   });\r\n    //   socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\r\n    //     handleSetMute(isMute, userId);\r\n    //   });\r\n\r\n    //   socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n    //   socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\r\n    //   socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\r\n    //   socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\r\n    //   socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\r\n    //     handleSetMute(true, userId);\r\n    //   });\r\n    //   socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\r\n    //     handleSetMute(false, userId);\r\n    //   });\r\n    //   socket.current.emit(ACTIONS.JOIN, {\r\n    //     roomId,\r\n    //     user,\r\n    //   });\r\n\r\n    //   async function captureMedia() {\r\n    //     // Start capturing local audio stream.\r\n    //     localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n    //       audio: true,\r\n    //     });\r\n    //   }\r\n    //   async function handleNewPeer({ peerId, createOffer, user: remoteUser }) {\r\n    //     if (peerId in connections.current) {\r\n    //       return console.warn(\r\n    //         `You are already connected with ${peerId} (${user.name})`\r\n    //       );\r\n    //     }\r\n\r\n    //     // Store it to connections\r\n    //     connections.current[peerId] = new RTCPeerConnection({\r\n    //       iceServers: freeice(),\r\n    //     });\r\n\r\n    //     // Handle new ice candidate on this peer connection\r\n    //     connections.current[peerId].onicecandidate = (event) => {\r\n    //       socket.current.emit(ACTIONS.RELAY_ICE, {\r\n    //         peerId,\r\n    //         icecandidate: event.candidate,\r\n    //       });\r\n    //     };\r\n\r\n    //     // Handle on track event on this connection\r\n    //     connections.current[peerId].ontrack = ({ streams: [remoteStream] }) => {\r\n    //       addNewClient({ ...remoteUser, muted: true }, () => {\r\n    //         // get current users mute info\r\n    //         const currentUser = clientsRef.current.find(\r\n    //           (client) => client.id === user.id\r\n    //         );\r\n    //         if (currentUser) {\r\n    //           socket.current.emit(ACTIONS.MUTE_INFO, {\r\n    //             userId: user.id,\r\n    //             roomId,\r\n    //             isMute: currentUser.muted,\r\n    //           });\r\n    //         }\r\n    //         if (audioElements.current[remoteUser.id]) {\r\n    //           audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n    //         } else {\r\n    //           let settled = false;\r\n    //           const interval = setInterval(() => {\r\n    //             if (audioElements.current[remoteUser.id]) {\r\n    //               audioElements.current[remoteUser.id].srcObject = remoteStream;\r\n    //               settled = true;\r\n    //             }\r\n\r\n    //             if (settled) {\r\n    //               clearInterval(interval);\r\n    //             }\r\n    //           }, 300);\r\n    //         }\r\n    //       });\r\n    //     };\r\n\r\n    //     // Add connection to peer connections track\r\n    //     localMediaStream.current.getTracks().forEach((track) => {\r\n    //       connections.current[peerId].addTrack(track, localMediaStream.current);\r\n    //     });\r\n\r\n    //     // Create an offer if required\r\n    //     if (createOffer) {\r\n    //       const offer = await connections.current[peerId].createOffer();\r\n\r\n    //       // Set as local description\r\n    //       await connections.current[peerId].setLocalDescription(offer);\r\n\r\n    //       // send offer to the server\r\n    //       socket.current.emit(ACTIONS.RELAY_SDP, {\r\n    //         peerId,\r\n    //         sessionDescription: offer,\r\n    //       });\r\n    //     }\r\n    //   }\r\n    //   async function handleRemovePeer({ peerId, userId }) {\r\n    //     // Correction: peerID to peerId\r\n    //     if (connections.current[peerId]) {\r\n    //       connections.current[peerId].close();\r\n    //     }\r\n\r\n    //     delete connections.current[peerId];\r\n    //     delete audioElements.current[peerId];\r\n    //     setClients((list) => list.filter((c) => c.id !== userId));\r\n    //   }\r\n    //   async function handleIceCandidate({ peerId, icecandidate }) {\r\n    //     if (icecandidate) {\r\n    //       connections.current[peerId].addIceCandidate(icecandidate);\r\n    //     }\r\n    //   }\r\n    //   async function setRemoteMedia({\r\n    //     peerId,\r\n    //     sessionDescription: remoteSessionDescription,\r\n    //   }) {\r\n    //     connections.current[peerId].setRemoteDescription(\r\n    //       new RTCSessionDescription(remoteSessionDescription)\r\n    //     );\r\n\r\n    //     // If session descrition is offer then create an answer\r\n    //     if (remoteSessionDescription.type === \"offer\") {\r\n    //       const connection = connections.current[peerId];\r\n\r\n    //       const answer = await connection.createAnswer();\r\n    //       connection.setLocalDescription(answer);\r\n\r\n    //       socket.current.emit(ACTIONS.RELAY_SDP, {\r\n    //         peerId,\r\n    //         sessionDescription: answer,\r\n    //       });\r\n    //     }\r\n    //   }\r\n    //   async function handleSetMute(mute, userId) {\r\n    //     const clientIdx = clientsRef.current\r\n    //       .map((client) => client.id)\r\n    //       .indexOf(userId);\r\n    //     const allConnectedClients = JSON.parse(\r\n    //       JSON.stringify(clientsRef.current)\r\n    //     );\r\n    //     if (clientIdx > -1) {\r\n    //       allConnectedClients[clientIdx].muted = mute;\r\n    //       setClients(allConnectedClients);\r\n    //     }\r\n    //   }\r\n    // };\r\n\r\n    // initChat();\r\n    return () => {\r\n      localMediaStream.current.getTracks().forEach((track) => track.stop());\r\n      socket.current.emit(ACTIONS.LEAVE, { roomId });\r\n      for (let peerId in connections.current) {\r\n        connections.current[peerId].close();\r\n        delete connections.current[peerId];\r\n        delete audioElements.current[peerId];\r\n      }\r\n      socket.current.off(ACTIONS.ADD_PEER);\r\n      socket.current.off(ACTIONS.REMOVE_PEER);\r\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\r\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\r\n      socket.current.off(ACTIONS.MUTE);\r\n      socket.current.off(ACTIONS.UNMUTE);\r\n    };\r\n  }, []);\r\n\r\n  const provideRef = (instance, userId) => {\r\n    audioElements.current[userId] = instance;\r\n  };\r\n\r\n  const handleMute = (isMute, userId) => {\r\n    let settled = false;\r\n\r\n    if (userId === user.id) {\r\n      let interval = setInterval(() => {\r\n        if (localMediaStream.current) {\r\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\r\n          if (isMute) {\r\n            socket.current.emit(ACTIONS.MUTE, {\r\n              roomId,\r\n              userId: user.id,\r\n            });\r\n          } else {\r\n            socket.current.emit(ACTIONS.UNMUTE, {\r\n              roomId,\r\n              userId: user.id,\r\n            });\r\n          }\r\n          settled = true;\r\n        }\r\n        if (settled) {\r\n          clearInterval(interval);\r\n        }\r\n      }, 200);\r\n    }\r\n  };\r\n\r\n  return {\r\n    clients,\r\n    provideRef,\r\n    handleMute,\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}