{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useState, useCallback, useEffect } from \"react\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nimport { socketInit } from \"../socket\";\nimport { ACTIONS } from \"../actions\";\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n\n  //capture media\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n    startCapture().then(() => {\n      addNewClient(user, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n        socket.current.emit(ACTIONS.JOIN, {\n          roomId,\n          user\n        });\n      });\n    });\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  return {\n    clients,\n    provideRef\n  };\n};\n_s(useWebRTC, \"bYVwUdEyPcra7C5rNGsoxAm4vfk=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useRef","useState","useCallback","useEffect","useStateWithCallback","socketInit","ACTIONS","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","localMediaStream","socket","current","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","localElement","volume","srcObject","emit","JOIN","provideRef","instance","userId"],"sources":["C:/Users/mukta/OneDrive/Pictures/Documents/codershouse-3/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useRef, useState, useCallback, useEffect } from \"react\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\nimport { socketInit } from \"../socket\";\r\nimport { ACTIONS } from \"../actions\";\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n  const [clients, setClients] = useStateWithCallback([]);\r\n  const audioElements = useRef({});\r\n  const connections = useRef({});\r\n  const localMediaStream = useRef(null);\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.current = socketInit();\r\n  }, []);\r\n\r\n  const addNewClient = useCallback(\r\n    (newClient, cb) => {\r\n      const lookingFor = clients.find((client) => client.id === newClient.id);\r\n      if (lookingFor === undefined) {\r\n        setClients((existingClients) => [...existingClients, newClient], cb);\r\n      }\r\n    },\r\n    [clients, setClients]\r\n  );\r\n\r\n  //capture media\r\n  useEffect(() => {\r\n    const startCapture = async () => {\r\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n      });\r\n    };\r\n\r\n    startCapture().then(() => {\r\n      addNewClient(user, () => {\r\n        const localElement = audioElements.current[user.id];\r\n        if (localElement) {\r\n          localElement.volume = 0;\r\n          localElement.srcObject = localMediaStream.current;\r\n        }\r\n\r\n        socket.current.emit(ACTIONS.JOIN, { roomId, user });\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  const provideRef = (instance, userId) => {\r\n    audioElements.current[userId] = instance;\r\n  };\r\n\r\n  return { clients, provideRef };\r\n};\r\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAChE,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,OAAO,QAAQ,YAAY;AAEpC,OAAO,MAAMC,SAAS,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,oBAAoB,CAAC,EAAE,CAAC;EACtD,MAAMS,aAAa,GAAGb,MAAM,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMc,WAAW,GAAGd,MAAM,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAMe,gBAAgB,GAAGf,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMgB,MAAM,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAE3BG,SAAS,CAAC,MAAM;IACda,MAAM,CAACC,OAAO,GAAGZ,UAAU,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,YAAY,GAAGhB,WAAW,CAC9B,CAACiB,SAAS,EAAEC,EAAE,KAAK;IACjB,MAAMC,UAAU,GAAGV,OAAO,CAACW,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAKL,SAAS,CAACK,EAAE,CAAC;IACvE,IAAIH,UAAU,KAAKI,SAAS,EAAE;MAC5Bb,UAAU,CAAEc,eAAe,IAAK,CAAC,GAAGA,eAAe,EAAEP,SAAS,CAAC,EAAEC,EAAE,CAAC;IACtE;EACF,CAAC,EACD,CAACT,OAAO,EAAEC,UAAU,CACtB,CAAC;;EAED;EACAT,SAAS,CAAC,MAAM;IACd,MAAMwB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BZ,gBAAgB,CAACE,OAAO,GAAG,MAAMW,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACnEC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAEDJ,YAAY,CAAC,CAAC,CAACK,IAAI,CAAC,MAAM;MACxBd,YAAY,CAACT,IAAI,EAAE,MAAM;QACvB,MAAMwB,YAAY,GAAGpB,aAAa,CAACI,OAAO,CAACR,IAAI,CAACe,EAAE,CAAC;QACnD,IAAIS,YAAY,EAAE;UAChBA,YAAY,CAACC,MAAM,GAAG,CAAC;UACvBD,YAAY,CAACE,SAAS,GAAGpB,gBAAgB,CAACE,OAAO;QACnD;QAEAD,MAAM,CAACC,OAAO,CAACmB,IAAI,CAAC9B,OAAO,CAAC+B,IAAI,EAAE;UAAE7B,MAAM;UAAEC;QAAK,CAAC,CAAC;MACrD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6B,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;IACvC3B,aAAa,CAACI,OAAO,CAACuB,MAAM,CAAC,GAAGD,QAAQ;EAC1C,CAAC;EAED,OAAO;IAAE5B,OAAO;IAAE2B;EAAW,CAAC;AAChC,CAAC;AAAC5B,EAAA,CA/CWH,SAAS;EAAA,QACUH,oBAAoB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}