{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nimport { socketInit } from \"../socket\";\nimport { ACTIONS } from \"../actions\";\nimport freeice from \"freeice\";\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const localMediaStream = useRef(null);\n  const socket = useRef(null);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const addNewClients = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    const startCapture = async () => {\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n    startCapture().then(() => {\n      addNewClients(user, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n        socket.current.emit(ACTIONS.JOIN, {\n          roomId,\n          user\n        });\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const handleNewPeer = async _ref => {\n      let {\n        peerId,\n        createOffer,\n        user: remoteUser\n      } = _ref;\n      if (peerId in connections.current) {\n        return console.warn(`You are already connected with ${peerId} (${user.name})`);\n      }\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice()\n      });\n      connections.current[peerId].oniceCandidate = event => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate\n        });\n      };\n    };\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n  }, []);\n  return {\n    clients,\n    provideRef\n  };\n};\n_s(useWebRTC, \"tMzlJVVGF64zxpmXY4lqjB7QB8c=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","useStateWithCallback","socketInit","ACTIONS","freeice","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","localMediaStream","socket","current","provideRef","instance","userId","addNewClients","newClient","cb","lookingFor","find","client","id","undefined","existingClients","startCapture","navigator","mediaDevices","getUserMedia","audio","then","localElement","volume","srcObject","emit","JOIN","handleNewPeer","_ref","peerId","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","oniceCandidate","event","RELAY_ICE","icecandidate","candidate","on","ADD_PEER"],"sources":["C:/Users/mukta/OneDrive/Pictures/Documents/codershouse-3/frontend/src/hooks/useWebRTC.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { useStateWithCallback } from \"./useStateWithCallback\";\r\nimport { socketInit } from \"../socket\";\r\nimport { ACTIONS } from \"../actions\";\r\nimport freeice from \"freeice\";\r\n\r\nexport const useWebRTC = (roomId, user) => {\r\n  const [clients, setClients] = useStateWithCallback([]);\r\n  const audioElements = useRef({});\r\n  const connections = useRef({});\r\n  const localMediaStream = useRef(null);\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socket.current = socketInit();\r\n  }, []);\r\n\r\n  const provideRef = (instance, userId) => {\r\n    audioElements.current[userId] = instance;\r\n  };\r\n\r\n  const addNewClients = useCallback(\r\n    (newClient, cb) => {\r\n      const lookingFor = clients.find((client) => client.id === newClient.id);\r\n      if (lookingFor === undefined) {\r\n        setClients((existingClients) => [...existingClients, newClient], cb);\r\n      }\r\n    },\r\n    [clients, setClients]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const startCapture = async () => {\r\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n      });\r\n    };\r\n\r\n    startCapture().then(() => {\r\n      addNewClients(user, () => {\r\n        const localElement = audioElements.current[user.id];\r\n        if (localElement) {\r\n          localElement.volume = 0;\r\n          localElement.srcObject = localMediaStream.current;\r\n        }\r\n        socket.current.emit(ACTIONS.JOIN, { roomId, user });\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleNewPeer = async ({ peerId, createOffer, user: remoteUser }) => {\r\n      if (peerId in connections.current) {\r\n        return console.warn(\r\n          `You are already connected with ${peerId} (${user.name})`\r\n        );\r\n      }\r\n\r\n      connections.current[peerId] = new RTCPeerConnection({\r\n        iceServers: freeice(),\r\n      });\r\n\r\n      connections.current[peerId].oniceCandidate = (event) => {\r\n        socket.current.emit(ACTIONS.RELAY_ICE, {\r\n          peerId,\r\n          icecandidate: event.candidate,\r\n        });\r\n      };\r\n    };\r\n\r\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\r\n  }, []);\r\n\r\n  return { clients, provideRef };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}